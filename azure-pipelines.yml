# https://aka.ms/yaml

variables:
  PIPENV_HIDE_EMOJIS: 1
  PIPENV_IGNORE_VIRTUALENVS: 1
  PIPENV_NOSPIN: 1
  PIPENV_VENV_IN_PROJECT: 1

jobs:
- job: test
  displayName: 'Lint & Test'

  pool:
    vmImage: 'Ubuntu 16.04'

  variables:
    PIPENV_CACHE_DIR: ".cache/pipenv"
    PIP_CACHE_DIR: ".cache/pip"

  steps:
  - script: |
      sudo apt-get update
      sudo apt-get install autoconf automake build-essential cmake curl libtool nodejs ruby-full ruby-dev
    displayName: 'Install base dependencies'

  - script: |
      sudo apt-get install rabbitmq-server
      sudo service rabbitmq-server start
    displayName: 'Install and start RabbitMQ'

  - script: |
      source /etc/lsb-release && echo "deb http://download.rethinkdb.com/apt $DISTRIB_CODENAME main" | sudo tee /etc/apt/sources.list.d/rethinkdb.list
      wget -qO- https://download.rethinkdb.com/apt/pubkey.gpg | sudo apt-key add -
      sudo apt-get update
      sudo apt-get install rethinkdb
      mkdir ./rdb
      sudo rethinkdb create -d ./rdb
      sudo rethinkdb serve --daemon -d ./rdb
    displayName: 'Install and start RethinkDB'

  - task: UsePythonVersion@0
    displayName: 'Set Python version'
    inputs:
      versionSpec: '3.6.x'
      addToPath: true

  - script: sudo pip install pipenv
    displayName: 'Install pipenv'

  - script: sudo npm install -g gulp-cli
    displayName: 'Install gulp'

  - script: pipenv install --dev --deploy
    displayName: 'Install project using pipenv'

  - script: pipenv run lint
    displayName: 'Lint Python'

  - script: pipenv run python gunicorn_config.py
    displayName: 'Set up database'

  - script: pipenv run test
    displayName: 'Run tests'

- job: build
  displayName: 'Build Containers'
  dependsOn: 'test'

  steps:
  - task: Docker@1
    displayName: 'Login: Docker Hub'

    inputs:
      containerregistrytype: 'Container Registry'
      dockerRegistryEndpoint: 'DockerHub'
      command: 'login'

  - task: ShellScript@2
    displayName: 'Build and deploy containers'

    inputs:
      scriptPath: scripts/deploy.sh
      args: '$(AUTODEPLOY_TOKEN) $(AUTODEPLOY_WEBHOOK)'
